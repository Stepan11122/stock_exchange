import pygame
import sys
import math
import random
def draw_rotated_rect_hover(surface, x, y, theta_deg, x_r, y_t, mouse_pos,num, color=(255, 255, 0), width_outline=2):
    theta = math.radians(-theta_deg)  # Clockwise rotation

    hw, hh = x / 2, y / 2

    # Define corners relative to center
    corners = [
        (-hw, -hh),
        ( hw, -hh),
        ( hw,  hh),
        (-hw,  hh),
    ]
envelope_name
    def rotate_point(px, py, angle):
        return (
            px * math.cos(angle) - py * math.sin(angle),
            px * math.sin(angle) + py * math.cos(angle)
        )

    rotated_corners = [rotate_point(px, py, theta) for px, py in corners]

    rightmost_x = max(rotated_corners, key=lambda p: p[0])[0]
    topmost_y = min(rotated_corners, key=lambda p: p[1])[1]

    cx = x_r - rightmost_x
    cy = y_t - topmost_y

    screen_points = [(cx + px, cy + py) for px, py in rotated_corners]

    # Check if mouse is inside the polygon
    def point_in_polygon(x, y, poly):
        inside = False
        n = len(poly)
        px, py = x, y
        for i in range(n):
            j = (i - 1) % n
            xi, yi = poly[i]
            xj, yj = poly[j]
            if ((yi > py) != (yj > py)):
                intersect = (px - xi) * (yj - yi) - (xj - xi) * (py - yi)
                if (intersect < 0) != (yj < yi):
                    inside = not inside
        return inside

    if point_in_polygon(mouse_pos[0], mouse_pos[1], screen_points):
        print(num)
        # Draw customized dashed outline
        for i in range(len(screen_points)):
            start = screen_points[i]
            end = screen_points[(i + 1) % len(screen_points)]
            draw_dashed_line(surface, color, start, end, dash_length=10, width=width_outline)

def draw_dashed_line(surface, color, start_pos, end_pos, dash_length=10, width=1):
    x1, y1 = start_pos
    x2, y2 = end_pos
    dl = dash_length

    length = math.hypot(x2 - x1, y2 - y1)
    dx = (x2 - x1) / length
    dy = (y2 - y1) / length

    for i in range(0, int(length / dl), 2):
        start_x = x1 + dx * dl * i
        start_y = y1 + dy * dl * i
        end_x = x1 + dx * dl * (i + 1)
        end_y = y1 + dy * dl * (i + 1)
        pygame.draw.line(surface, color, (start_x, start_y), (end_x, end_y), width)
# Настройки
Width, Height = 800, 600
FPS = 60
pi=3.1415
AnimationToTalTime=60
AnimationOfRotationTime=0
BUTTON_COLOR_1 = (52, 152, 219)
BUTTON_HOVER_1 = (41, 128, 185)
TEXT_COLOR_1 = (255, 255, 255)
SHADOW_COLOR_1 = (0, 0, 0, 50)
button_width_1 = 180
button_height_1 = 50
card_height=200
card_wight=100
button_rect = pygame.Rect(Width - button_width_1 - 20, 20, button_width_1, button_height_1)
AnimationIsActive=0
# Инициализация Pygame
pygame.init()
font = pygame.font.SysFont("segoeui", 28)
screen = pygame.display.set_mode((Width, Height))
pygame.display.set_caption("Карточный стол - 4 игрока")
clock = pygame.time.Clock()
image = pygame.image.load("background.png").convert_alpha()
image = pygame.transform.scale(image, (800, 600))
NumOfPlayers=4
CurrentPlayer=0
cards=[]
# Основной цикл
running = True
for i in range(NumOfPlayers):
    deck=[]
    for k in range(10):
        deck.append(random.randint(1,21)-11)
    cards.append(deck)
while running:
    mouse_pos = pygame.mouse.get_pos()
    clock.tick(FPS)
    if AnimationIsActive:
        AnimationOfRotationTime+=1
    if AnimationOfRotationTime==AnimationToTalTime:
        AnimationOfRotationTime=0
        CurrentPlayer+=1
        AnimationIsActive=0
    if CurrentPlayer==NumOfPlayers:
        CurrentPlayer=0
    if not AnimationIsActive:
        current_card=0
        for elem in cards[CurrentPlayer]:
            images = pygame.image.load(str(elem)+".png").convert_alpha()
            imagesc = pygame.transform.scale(images, (card_wight,card_height))
            ds=0
            if len(cards[CurrentPlayer])%2==0:
                ds=2.5
            ss=0
            if (len(cards[CurrentPlayer])==9 or len(cards[CurrentPlayer])==10) and (current_card==0 or current_card==1 or current_card==9 or current_card==10):
                ss=card_height/16
                if current_card==0 or current_card==len(cards[CurrentPlayer]):
                    ss+=card_height/16     
            imager = pygame.transform.rotate(imagesc,-(-5*len(cards[CurrentPlayer])//2+5*current_card+ds))
            screen.blit(imager,(Width/2-card_wight/2-5*len(cards[CurrentPlayer])//2/6*card_wight+5*current_card*card_wight/6,2*Height/4+ss))
            draw_rotated_rect_hover(screen,card_wight,card_height,-(-5*len(cards[CurrentPlayer])//2+5*current_card+ds),Width/2-card_wight/2-5*len(cards[CurrentPlayer])//2/6*card_wight+5*current_card*card_wight/6+card_wight*math.cos(pi/180*(-5*len(cards[CurrentPlayer])//2+5*current_card+ds))+card_height*abs(math.sin(pi/180*(-5*len(cards[CurrentPlayer])//2+5*current_card+ds))),2*Height/4+ss, mouse_pos,current_card)
            current_card+=1
    AngleOfScreenRotation=2*pi*(CurrentPlayer+(AnimationOfRotationTime/AnimationToTalTime))/NumOfPlayers
    image2 = pygame.transform.rotate(image, -360*(AnimationOfRotationTime+AnimationToTalTime*CurrentPlayer)/NumOfPlayers/AnimationToTalTime)
    image3 = pygame.transform.scale(image2, (Width+abs(4*Height*math.sin(AngleOfScreenRotation)*math.cos(AngleOfScreenRotation)),abs(4*Width*math.cos(AngleOfScreenRotation)*math.sin(AngleOfScreenRotation))+Height))
    is_hovered = button_rect.collidepoint(mouse_pos)
    # Обновляем экран
    pygame.display.flip()
    screen.blit(image3,(-abs(2*Height*math.cos(AngleOfScreenRotation)*math.sin(AngleOfScreenRotation)),-Width*abs(2*math.cos(AngleOfScreenRotation)*math.sin(AngleOfScreenRotation))))
    # Draw shadow
    shadow_offset = 4
    shadow_rect = button_rect.move(shadow_offset, shadow_offset)
    pygame.draw.rect(screen, (0, 0, 0), shadow_rect, border_radius=12)

    # Draw button
    button_color = BUTTON_HOVER_1 if is_hovered else BUTTON_COLOR_1
    pygame.draw.rect(screen, button_color, button_rect, border_radius=12)

    # Draw text
    text = font.render("Next Player", True, TEXT_COLOR_1)
    text_rect = text.get_rect(center=button_rect.center)
    screen.blit(text, text_rect)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1 and not AnimationIsActive:
            if is_hovered:
                AnimationIsActive=1
                
pygame.quit()
sys.exit()
